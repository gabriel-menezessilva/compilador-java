/* Generated By:JavaCC: Do not edit this line. Comp.java */
package Principal;
import java.io.*;

public class Comp implements CompConstants {
  public static void main(String args []) throws ParseException
  {
    int cont = 1;
    while (cont <= 1)
    {
      System.out.println("\u005cn\u005cn\u005cnIniciando leitura....");
      try
      {
        Comp x = new Comp(new FileInputStream("assets\u005c\u005c3-3 exemplo" + cont + ".txt"));
        System.out.println("Leitura feita....");
        System.out.println("\u005cn\u005ct\u005ctIniciando analisador do exemplo " + cont + "....\u005cn");
        //x.S();
        System.out.println();
        x.inicio();
        cont++;
      }
      catch (FileNotFoundException e)
      {
        System.out.println("Arquivo nao encontrado");
        cont++;
      }
      catch (TokenMgrError e)
      {
        System.out.println("\u005cnErro lexico\u005cn" + e.getMessage());
        cont++;
      }
      catch (ParseException e)
      {
        System.out.println("\u005cnErro no parse\u005cn" + e.getMessage());
        cont++;
      }
    }
  }

/*


*/
  final public void expressao() throws ParseException {
    termo1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OU:
      jj_consume_token(OU);
      termo1();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void termo1() throws ParseException {
    termo2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      termo2();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void termo2() throws ParseException {
    termo3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case MAIOR_QUE:
    case MAIOR_IGUAL:
    case MENOR_QUE:
    case MENOR_IGUAL:
    case EQUIVALENTE:
    case DIFERENTE:
    case ABRE_PARENTESE:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIOR_QUE:
        case MAIOR_IGUAL:
        case MENOR_QUE:
        case MENOR_IGUAL:
        case EQUIVALENTE:
        case DIFERENTE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIOR_QUE:
          jj_consume_token(MAIOR_QUE);
          break;
        case MENOR_QUE:
          jj_consume_token(MENOR_QUE);
          break;
        case EQUIVALENTE:
          jj_consume_token(EQUIVALENTE);
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
          break;
        case MAIOR_IGUAL:
          jj_consume_token(MAIOR_IGUAL);
          break;
        case MENOR_IGUAL:
          jj_consume_token(MENOR_IGUAL);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      termo3();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void termo3() throws ParseException {
    termo4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADICAO:
    case SUBTRACAO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADICAO:
        jj_consume_token(ADICAO);
        termo4();
        break;
      case SUBTRACAO:
        jj_consume_token(SUBTRACAO);
        termo4();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void termo4() throws ParseException {
    termo5();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACAO:
    case DIVISAO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
        termo5();
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
        termo5();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void termo5() throws ParseException {
    termo6();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POTENCIA:
      jj_consume_token(POTENCIA);
      termo6();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void termo6() throws ParseException {
    termo7();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACAO:
      jj_consume_token(NEGACAO);
      termo7();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void termo7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case ABRE_PARENTESE:
      jj_consume_token(ABRE_PARENTESE);
      expressao();
      jj_consume_token(FECHA_PARENTESE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*---------------------------------------*/

/* GLC do "inicio" */
  final public void inicio() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_TYPE:
      case NUMBER_TYPE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      corpoCodigo();
    }
    jj_consume_token(0);
  }

/*
	GLC do corpo do código
Como seria o corpo do codigo inicialmente
	*/
  final public void corpoCodigo() throws ParseException {
    declaraVariaveis();
    comandos();
  }

/*
	GLC da declaração de variaveis
aqui estamos definindo como vamos declarar
uma variavel
	*/
  final public void declaraVariaveis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_TYPE:
      jj_consume_token(NUMBER_TYPE);
      break;
    case STRING_TYPE:
      jj_consume_token(STRING_TYPE);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    variaveis();
  }

/*
	GLC das variaveis
aqui estamos definindo como são identificadas
as variaveis
*/
  final public void variaveis() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
    }
  }

/*
	GLC dos comandos
aqui estamos dizenso que nosso código
precisa ter pelo menos um comando

	 */
  final public void comandos() throws ParseException {
    label_4:
    while (true) {
      comando();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case IMPRIMIR:
      case SE:
      case FIM_SE:
      case SENAO:
      case ENQUANTO:
      case PARAR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
  }

/*
	GLC do comando
aqui estamos definindo quais os tokens que definem um comando, por exemplo:

print("Texto exibido"); --> é um comando
 */
  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
      break;
    case IMPRIMIR:
      jj_consume_token(IMPRIMIR);
      jj_consume_token(ABRE_PARENTESE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
        case STRING:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          jj_consume_token(STRING);
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(FECHA_PARENTESE);
      jj_consume_token(PT_VIRG);
      break;
    case SE:
      jj_consume_token(SE);
      break;
    case FIM_SE:
      jj_consume_token(FIM_SE);
      break;
    case SENAO:
      jj_consume_token(SENAO);
      break;
    case ENQUANTO:
      jj_consume_token(ENQUANTO);
      break;
    case PARAR:
      jj_consume_token(PARAR);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  void S() throws ParseException {
  Token t;
  do
  {
    t = getNextToken();
    System.out.println(tokenImage [ t.kind ] + "\u005ct" + t.image);
  }
  while (t.kind != EOF);
  }

  /** Generated Token Manager. */
  public CompTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x80000,0x1f800,0x1f800,0x1001fc00,0x600000,0x600000,0x1800000,0x1800000,0x2000000,0x40000,0x10000400,0x0,0x0,0x80000000,0x0,0x280,0x280,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x600,0x0,0xfe,0x0,0x0,0xfe,};
   }

  /** Constructor with InputStream. */
  public Comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Comp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Comp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Comp(CompTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
