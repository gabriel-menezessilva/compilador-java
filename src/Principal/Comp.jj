options
{
  static = false;
  DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
  DEBUG = true;
}

PARSER_BEGIN(Comp)
package Principal;
import java.io.*;

public class Comp
{
  public static void main(String args []) throws ParseException
  {
    int cont = 1;
    while (cont <= 1)
    {
      System.out.println("\n\n\nIniciando leitura....");
      try
      {
        Comp x = new Comp(new FileInputStream("assets\\3-3 exemplo" + cont + ".txt"));
        System.out.println("Leitura feita....");
        System.out.println("\n\t\tIniciando analisador do exemplo " + cont + "....\n");
        x.S();
        cont++;
      }
      catch (FileNotFoundException e)
      {
        System.out.println("Arquivo nao encontrado");
        cont++;
      }
      catch (TokenMgrError e)
      {
        System.out.println("\nErro lexico\n" + e.getMessage());
        cont++;
      }
    }
  }
}

PARSER_END(Comp)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// COMENTARIOS 
SPECIAL_TOKEN :
{
  < COMENTARIO :
    "/*" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
| < COMENTARIOLINHA :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN : /* REGRA PARA IDENTIFICAR VARIAVEL */
{
  < IDENTIFICADOR : 	"@" ([ "A"-"Z", "a"-"z", "_", "-", "0"-"9" ])* >
}

TOKEN : /* ATRIBUICAO */
{
  < ATRIBUICAO : "=" >
}

TOKEN : /* TIPOS DE DADOS */
{
  < STRING :
    ("'")
    (
      ([ "A"-"Z", "a"-"z", "0"-"9", " ", "+", "-", "*", "/", ".", ",", "=", "!", ":", ";", "%", "(", ")" ])*
    )
    ("'") >
| < NUMBER : ([ "0"-"9" ])+ "." ([ "0"-"9" ])* >
}

TOKEN : /* OPERADORES RELACIONAIS */
{
  < MAIOR_QUE : ">" >
| < MAIOR_IGUAL : ">=" >
| < MENOR_QUE : "<" >
| < MENOR_IGUAL : "<=" >
| < EQUIVALENTE : "==" >
| < DIFERENTE : "!=" >
| < PERCENTUAL : "%" >
}

TOKEN : /* OPERADORES LOGICOS */
{
  < NEGACAO : "!" >
| < AND : "&&" >
| < OU : "||" >
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < ADICAO : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
| < POTENCIA : "^" >
}

TOKEN : /* SEPARADORES */
{
  < ABRE_CHAVES : "{" >
| < FECHA_CHAVES : "}" >
| < ABRE_PARENTESE : "(" >
| < FECHA_PARENTESE : ")" >
}

TOKEN :
{
  < PT_VIRG : ";" >
| < VIRGULA : "," >
| < PONTO : "." >
}

TOKEN : /* COMANDOS */
{
  < INPUT : "input" >
| < IMPRIMIR : "print" >
| < SE : "if" >
| < FIM_SE : "endif" >
| < SENAO : "else" >
| < ENQUANTO : "while" >
| < PARAR : "break" >
| < RETORNE : "return" >
| < STRING_TYPE : "string" >
| < NUMBER_TYPE : "number" >
| < TYPE :
    "number"
  | "string" >
| 	< PROGRAMA : "program" >
}

/*


*/
void expressao() :
{}
{
  termo1() [ (< OU >) termo1() ]
}

void termo1() :
{}
{
  termo2() [ (< AND >) termo2() ]
}

void termo2() :
{}
{
  termo3()
  [
    (
      < MAIOR_QUE >
    | < MENOR_QUE >
    | < EQUIVALENTE >
    | < DIFERENTE >
    | < MAIOR_IGUAL >
    | < MENOR_IGUAL >
    )*
    termo3()
  ]
}

void termo3() :
{}
{
  termo4()
  [
    (
      < ADICAO > termo4()
    | < SUBTRACAO > termo4()
    )
  ]
}

void termo4() :
{}
{
  termo5()
  [
    (
      < MULTIPLICACAO > termo5()
    | < DIVISAO > termo5()
    )
  ]
}

void termo5() :
{}
{
  termo6()
  [
    (
      < POTENCIA > termo6()
    )
  ]
}

void termo6() :
{}
{
  termo7()
  [
    (
      < NEGACAO > termo7()
    )
  ]
}

void termo7() :
{}
{
  (
    < NUMBER >
  | < ABRE_PARENTESE > expressao() < FECHA_PARENTESE >
  )
}

void printar():
{}

{
	< IMPRIMIR > < ABRE_PARENTESE > < STRING > < FECHA_PARENTESE > < PT_VIRG >
}

JAVACODE void S()
{
  Token t;
  do
  {
    t = getNextToken();
    System.out.println(tokenImage [ t.kind ] + "\t" + t.image);
  }
  while (t.kind != EOF);
}
