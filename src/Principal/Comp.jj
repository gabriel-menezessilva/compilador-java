options
{
  static = false;
  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
  DEBUG = true;
}

PARSER_BEGIN(Comp)
package Principal;
import java.io.*;
import Resources.*;
import java.util.HashMap;

public class Comp
{
  static Table tab = new Table();

  public static void main(String args []) throws ParseException
  {
    int cont = 1;
    while (cont == 1)
    {
      System.out.println("\n\n\nIniciando leitura....");
      try
      {
        Comp x = new Comp(new FileInputStream("assets/3-3 exemplo" + cont + ".txt"));
        System.out.println("Leitura feita....");
        System.out.println("\n\t\tIniciando analisador do exemplo " + cont + "....\n");
        System.out.println();
        x.inicio();
        System.out.println(tab);
        cont++;
      }
      catch (FileNotFoundException e)
      {
        System.out.println("Arquivo nao encontrado");
        cont++;
      }
      catch (TokenMgrError e)
      {
        System.out.println("\nErro lexico\n" + e.getMessage());
        cont++;
      }
      catch (ParseException e)
      {
        System.out.println("\nErro no parse\n" + e.getMessage());
        cont++;
      }
    }
  }
}

PARSER_END(Comp)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// COMENTARIOS 
SPECIAL_TOKEN :
{
  < COMENTARIO :
    "/*" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
| < COMENTARIOLINHA :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN : /* REGRA PARA IDENTIFICAR VARIAVEL */
{
  < IDENTIFICADOR : 	"@" ([ "A"-"Z", "a"-"z", "_", "-", "0"-"9" ])* >
}

TOKEN : /* ATRIBUICAO */
{
  < ATRIBUICAO : "=" >
}

TOKEN : /* TIPOS DE DADOS */
{
  < STRING : 
    ("'") 
    (~[ "\"", "\n", "\r" ])* 
    ("'") >
| < NUMBER : ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])* >
}

TOKEN : /* OPERADORES RELACIONAIS */
{
  < MAIOR_QUE : ">" >
| < MAIOR_IGUAL : ">=" >
| < MENOR_QUE : "<" >
| < MENOR_IGUAL : "<=" >
| < EQUIVALENTE : "==" >
| < DIFERENTE : "!=" >
| < PERCENTUAL : "%" >
}

TOKEN : /* OPERADORES LOGICOS */
{
  < NEGACAO : "!" >
| < AND : "&&" >
| < OU : "||" >
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < ADICAO : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
| < POTENCIA : "^" >
}

TOKEN : /* SEPARADORES */
{
  < ABRE_CHAVES : "{" >
| < FECHA_CHAVES : "}" >
| < ABRE_PARENTESE : "(" >
| < FECHA_PARENTESE : ")" >
}

TOKEN :
{
  < PT_VIRG : ";" >
| < VIRGULA : "," >
| < PONTO : "." >
| < CONCAT : "#" >
}

TOKEN : /* COMANDOS */
{
  < INPUT : "input" >
| < IMPRIMIR : "print" >
| < SE : "if" >
| < FIM_SE : "endif" >
| < SENAO : "else" >
| < ENQUANTO : "while" >
| < PARAR : "break" >
| < RETORNE : "return" >
| < STRING_TYPE : "string" >
| < NUMBER_TYPE : "number" >
}

/*---------------------------------------*/

/* GLC do "inicio" */
void inicio() :
{}
{
  (
    comando()
  )*
  < EOF >
}

/*
    GLC do comando aqui estamos definindo quais os tokens que definem um comando,
	Exemplo: print("Texto exibido"); --> � um comando.
*/
void comando() :
{}
{
  (
    (
      declaraVariaveis()
    )
  |
    (
      estruturaInput()
    ) /* MONTANDO A "EBNF" DO COMANDO INPUT */
  |
    (
      < IMPRIMIR > saidaMensagem()
    ) /* MONTANDO A "EBNF" DO COMANDO PRINT */
  |
    (
      estruturaIF()
    ) /* MONTANDO A "EBNF" DA ESTRUTURA DO IF */
  |
    (
      < ENQUANTO > estruturaFuncaoBase()
    )
  | (< PARAR >)
  )
  < PT_VIRG >
}

/*
	GLC da declara��o de variaveis aqui estamos definindo como vamos declarar uma variavel ou definir um valor para ela. 
*/
void declaraVariaveis() :
{
  Symbol simb;
  Token t;
  char tp;
}
{
  (
    < NUMBER_TYPE >
    {
      tp = 'N';
    }
  | < STRING_TYPE >
    {
      tp = 'S';
    }
  )
  (
    t = < IDENTIFICADOR >
    {
      simb = new Symbol(t.image, tp);
      try
      {
        tab.inclui(simb);
      }
      catch (CompilerException e)
      {
        System.out.println(e.getMessage());
        e.printStackTrace();;
      }
    }
    (
      < VIRGULA > t = < IDENTIFICADOR >
      {
        simb = new Symbol(t.image, tp);
        try
        {
          tab.inclui(simb);
        }
        catch (CompilerException e)
        {
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
      }
    )*
    (
      < ATRIBUICAO >
      (
        (
          expressao()
        | < STRING >
        | estruturaInput()
        )
        (< CONCAT >)?
      )+
    )?
  )
}

void estruturaInput() :
{}
{
  < INPUT > saidaMensagem()
}

//Estrutura base para sa�da de mensagem
// ARUMAR O PROBLEMA DO CONCATENADOR
void saidaMensagem() :
{
  Token t;
}
{
  < ABRE_PARENTESE >
  (
    < STRING > saidaMensagemExtOpt()
  | t = < IDENTIFICADOR >
    {
      try
      {
        tab.isExiste(t.image);
      }
      catch (CompilerException e)
      {
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
    saidaMensagemExtOpt()
  )*
  < FECHA_PARENTESE >
}

void saidaMensagemExtOpt() :
{}
{
  (
    < CONCAT >
    (
      expressao()
    | < STRING >
    )
  )*
}

/*
	Respons�vel por montar a estrutura base do condicional IF
*/
void estruturaIF() :
{}
{
  < SE > 	estruturaFuncaoBase()
  (
    < SENAO > corpoCodigoBase()
  )?
  < FIM_SE >
}

/*
	Respons�vel por montar a express�o e o corpo da fun��o
    Exemplo:   (express�o) { corpo da express�o}
*/
void estruturaFuncaoBase() :
{}
{
  < ABRE_PARENTESE > 	expressao() 	< FECHA_PARENTESE > 
  corpoCodigoBase()
}

/*
 	Respons�vel por montar o corpo da fun��o, contendo o come�o e o fim das chaves
  	Exemplo: { comandos }
*/
void corpoCodigoBase() :
{}
{
  < ABRE_CHAVES >
  (
    comando()
  )*
  < FECHA_CHAVES >
}

void expressao() :
{}
{
  termo1()
  (
    < OU > termo1()
  )*
}

void termo1() :
{}
{
  termo2()
  (
    < AND > termo2()
  )*
}

void termo2() :
{}
{
  termo3()
  (
    (
      < MAIOR_QUE >
    | < MENOR_QUE >
    | < EQUIVALENTE >
    | < DIFERENTE >
    | < MAIOR_IGUAL >
    | < MENOR_IGUAL >
    )
    termo3()
  )*
}

void termo3() :
{}
{
  (< SUBTRACAO >)? termo4()
  (
    (
      < ADICAO >
    | < SUBTRACAO >
    )+
    termo4()
  )*
}

void termo4() :
{}
{
  termo5()
  (
    (
      < MULTIPLICACAO >
    | < DIVISAO >
    )
    termo5()
  )*
}

void termo5() :
{}
{
  termo6()
  (
    < POTENCIA > termo6()
  )*
}

void termo6() :
{}
{
  (
    (< NEGACAO >)* termo7()
  )
}

void termo7() :
{
  Symbol simb;
  Token t;
}
{
  < NUMBER >
| t = < IDENTIFICADOR >
  {
    try
    {
      tab.isExiste(t.image);
    }
    catch (CompilerException e)
    {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
| < ABRE_PARENTESE > expressao() < FECHA_PARENTESE >
}
